<?xml version="1.0"?>
<launch>
  <arg name="file_server" default="true" />
  <arg name="teleop" default="true" />
  <arg name="joy_teleop" default="false" />
  <arg name="myEKF" default="true" />
  <arg name="kiss_icp" default="false" />
  <arg name="gmapping" default="false" />
  <arg name="gui" default="false" />
  <arg name="rviz" default="true" />
  <arg name="x_pos" default="-6.5" />
  <arg name="y_pos" default="3.0" /><!-- -7.750 -->
  <arg name="z_pos" default="0" />
  <arg name="yaw" default="0" /><!-- 1.57 -->
  <!-- <arg name="path_to_world" default="$(find master_thesis_kremmel)/worlds/test_world.world" /> -->
  <arg name="path_to_world" default="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world" />
<!-- 

Test World names:
 +  test_world_lin1
 +  test_world_lin2
 +  test_world_ang1
 +  test_world_ang2
 +  test_world

 -->
  <group if="$(arg file_server)">
    <include file="$(find file_server)/launch/ros_sharp_communication.launch">
      <arg name="port" value="9090" />
    </include>
  </group>

  <include file="$(find master_thesis_kremmel)/launch/turtlebot3_VLP16.launch">
    <arg name="world_name" value="$(arg path_to_world)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="x_pos" value="$(arg x_pos)" />
    <arg name="y_pos" value="$(arg y_pos)" />
    <arg name="z_pos" value="$(arg z_pos)" />
    <arg name="yaw" value="$(arg yaw)" />
  </include>

  <!--Start Teleop -->
  <group if="$(arg teleop)">
    <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <param name="model" value="$(arg model)"/>
    <!-- turtlebot3_teleop_key already has its own built in velocity smoother -->
    <node pkg="turtlebot3_teleop" type="turtlebot3_teleop_key" name="turtlebot3_teleop_keyboard"  output="screen"  launch-prefix="xterm -e">
      <remap from="cmd_vel" to="/cmd_vel_raw"/>
    </node>
  </group>

  <group if="$(arg joy_teleop)">
    <arg name="joy_dev" default="/dev/input/js0" />
    <arg name="config_filepath" default="$(find master_thesis_kremmel)/config/xbox.yaml" />
    
    <node pkg="joy" type="joy_node" name="joy_node">
      <param name="dev" value="$(arg joy_dev)" />
      <param name="deadzone" value="0.3" />
      <param name="autorepeat_rate" value="20" />
    </node>

    <node pkg="teleop_twist_joy" name="teleop_twist_joy" type="teleop_node">
      <rosparam command="load" file="$(arg config_filepath)" />
    </node>
  </group>

  <!-- Start KISS-ICP -->
  <group if="$(arg kiss_icp)">
    <include file="$(find kiss_icp)/launch/odometry.launch">
      <arg name="visualize" default="false" />
      <arg name="odom_frame" default="odom" />
      <arg name="child_frame" default="base_link" />
      <arg name="topic" default="transformed_laserscan" />
    </include>
  </group>

  <!-- Start Gmapping -->
  <group if="$(arg gmapping)">
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
      <remap from="cloud_in" to="/velodyne_points"/>
      <remap from="scan" to="/base_scan" />
      <rosparam>
        target_frame: velodyne
        transform_tolerance: 0.01
        min_height: 0.0
        max_height: 2.5
        angle_min: -1.5708
        angle_max: 1.5708
        angle_increment: 0.0087
        scan_time: 0.1
        range_min: 1.0
        range_max: 30.0
        use_inf: true
        concurrency_level: 1
      </rosparam>
    </node>
    <node pkg="gmapping" type="slam_gmapping" name="turtlebot3_slam_gmapping">
      <remap from="scan" to="base_scan"/>
      <param name="base_frame" value="base_footprint"/>
      <param name="odom_frame" value="odom"/>
      <param name="map_frame"  value="map"/>
      <rosparam command="load" file="$(find master_thesis_kremmel)/config/gmapping_params.yaml" />
    </node>
  </group>

  <!-- Start Rviz -->
  <group if="$(arg rviz)">
    <node name="rviz" pkg="rviz" type="rviz"
      args="-d $(find master_thesis_kremmel)/config/rviz.rviz" />
  </group>

  <!-- Start implemented EKF -->
  <group if="$(arg myEKF)">
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_to_odom" args="0 0 0 0 0 0 world odom" />

    <node name="LandmarkProcessor" type="LandmarkProcessor" pkg="master_thesis_kremmel" output="screen" />
      <node name="EKFSlam" type="EKFSlam" pkg="master_thesis_kremmel" output="screen">
      <param name="x_pos" value="$(arg x_pos)" />
      <param name="y_pos" value="$(arg y_pos)" />
      <param name="yaw" value="$(arg yaw)" />
      <param name="robotBase" value="0.287" />
      <param name="robotWheelRadius" value="0.033" />
      <param name="fitnessScoreThreshhold" value="0.008" />
      <param name="maxNumLandmarks" value="30" />
    </node>
  </group>

  <!-- Transform laserscan for Kiss ICP -->
  <group if="$(arg kiss_icp)">
    <node name="TransformLaserScan" type="TransformLaserScan" pkg="master_thesis_kremmel" output="screen" />
  </group>

  <!-- Start node that stores data to csv file -->
  <node name="Evaluator" type="Evaluator" pkg="master_thesis_kremmel" output="screen" />

  <!-- Start node that smoothes cmd_vel -->
  <node name="CmdVelSmoother" type="CmdVelSmoother" pkg="master_thesis_kremmel" output="screen" />
</launch>